// Generated by CoffeeScript 1.6.2
var AvatarsIO;

AvatarsIO = (function() {
  function AvatarsIO(token) {
    this.token = token;
  }

  AvatarsIO.prototype.create = function(input) {
    return new AvatarsIO.Uploader(this.token, input);
  };

  return AvatarsIO;

})();

AvatarsIO.Uploader = (function() {
  Uploader.prototype.identifier = '';

  Uploader.prototype.host = 'http://avatars.io';

  Uploader.prototype.allowedExtensions = ['jpg', 'jpeg', 'png', 'gif', 'JPG', 'JPEG', 'PNG', 'GIF'];

  function Uploader(token, input) {
    this.token = token;
    this.input = input;
    this.initialize();
    this.emit('init');
  }

  Uploader.prototype.initialize = function() {
    var url,
      _this = this;

    url = "" + this.host + "/v1/upload?authorization=" + this.token + (this.identifier.length > 0 ? '&shortcut=' + this.identifier : '');
    this.socket = new easyXDM.Socket({
      remote: url,
      onMessage: function(message, origin) {
        if (!message) {
          return _this.emit('error');
        }
        return _this.emit('complete', [message]);
      }
    });
    if (!this.widget) {
      return this.widget = new AjaxUpload(this.input, {
        action: url,
        name: 'avatar',
        allowedExtensions: this.allowedExtensions,
        onSubmit: function() {
          return _this.emit('start');
        }
      });
    }
  };

  Uploader.prototype.setHost = function(host) {
    this.host = host != null ? host : 'http://avatars.io';
  };

  Uploader.prototype.setIdentifier = function(identifier) {
    var _this = this;

    this.identifier = identifier != null ? identifier : '';
    return setTimeout(function() {
      if (_this.socket) {
        _this.socket.destroy();
      }
      return _this.initialize();
    }, 100);
  };

  Uploader.prototype.setAlbum = function() {
    return this.setIdentifier.apply(this, arguments);
  };

  Uploader.prototype.setAlbumID = function() {
    return this.setAlbum.apply(this, arguments);
  };

  Uploader.prototype.setAllowedExtensions = function(allowedExtensions) {
    var extension, _i, _len, _ref;

    this.allowedExtensions = allowedExtensions != null ? allowedExtensions : [];
    _ref = this.allowedExtensions;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      extension = _ref[_i];
      this.allowedExtensions.push(extension.toUpperCase());
    }
    if (this.widget) {
      return this.widget._settings.allowedExtensions = this.allowedExtensions;
    }
  };

  Uploader.prototype.listeners = {};

  Uploader.prototype.on = function(event, listener) {
    if (!this.listeners[event]) {
      this.listeners[event] = [];
    }
    return this.listeners[event].push(listener);
  };

  Uploader.prototype.emit = function(event, args, context) {
    var listener, _i, _len, _ref;

    if (context == null) {
      context = this;
    }
    if (!this.listeners[event]) {
      return;
    }
    _ref = this.listeners[event];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      listener = _ref[_i];
      listener.apply(context, args);
    }
    return void 0;
  };

  return Uploader;

})();
